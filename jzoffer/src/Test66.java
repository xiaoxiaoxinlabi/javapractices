public class Test66 {

//  给定一个数组 A[0,1,…,n-1]，请构建一个数组 B[0,1,…,n-1]，其中 B 中的元素 B[i]=A[0]×A[1]×…×A[i-1]×A[i+1]×…×A[n-1]。不能使用除法。
//  输入: [1,2,3,4,5]
//  输出: [120,60,40,30,24]
//  根据表格的主对角线（全为 11 ），可将表格分为 上三角 和 下三角 两部分。分别迭代计算下三角和上三角两部分的乘积，即可 不使用除法 就获得结果。



//  如题：
//      [1,2,3,4,5] b[0]
//      [1,1,3,4,5] b[1]
//      [1,2,1,4,5] b[2]
//      [1,2,3,1,5] b[3]
//      [1,2,3,4,1] b[4]
//  通过计算该矩阵的下三角矩阵和上三角矩阵进行求解


public int [] constructArr1(int [] a){

  if(a.length == 0){
    return new int[0];
  }

//  始化：数组 B ，其中 B[0] = 1；辅助变量 tmp = 1 ；
  int [] b= new int[a.length];
  b[0]=1;
  int temp = 1;


//  算 B[i]的 下三角 各元素的乘积，直接乘入 B[i]；
  for(int i = 1; i < a.length; i ++){
    b[i] = b[i-1] * a[i-1];
  }

//  计算 B[i] 的 上三角 各元素的乘积，记为 tmp ，并乘入 B[i] ；
  for(int i = a.length-2; i>=0; i--){
    //倒数第一个开始加
    temp*=a[i+1];
    //倒数第一行不用加,直接从倒数第二行开始计算就可以
    b[i] *=temp;
  }
  return b;
}

}
