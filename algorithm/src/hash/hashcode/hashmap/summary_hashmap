HashMap:
    1，概念：
              HashMap是一个用于存储Key-Value键值对的集合，每一个键值对也叫做Entry。这些个键值对（Entry）分散存储在一个数组当中，这个数组就是HashMap的主干
              HashMap数组的每一个元素不止是一个Entry对象，也是一个链表的头节点。每一个Entry对象通过Next指针指向它的下一个Entry节点。当新来的Entry映射到冲突的数组位置时，只需要插入到对应的链表即可：

    2，初始值：HashMap数组每一个元素的初始值都是Null。

    3，常用的方法：对于HashMap，我们最常使用的是两个方法：get 和 put。

    4，HashMap中的数组容量默认长度：16
                当hashMap中的数据量一步步增大，超过阀值（加载因子，默认值是0.75）时，会自动扩展。扩展的过程是：创建一个新的HashMap，将原hashMap中的数据添加到新的hashMap中，这中间涉及到重新计算元素在数组中的位置索引，所以会非常耗时。所以在适应过程中，最好提前预估一下数据量，在hashMap初始化的时候，设置合适的 初始容量 和 加载因子。
                默认值为16的原因：
                      为了服务于从key映射到index的hash算法
                      采用位运算的方式：index = HashCode（Key） & （Length - 1）

    5，HashMap的内部原理：

             5.1，HashMap的内部结构：左侧是一个数组，右侧是一个个的链表，数组中存放的是链表的头结点。采用链表是为了解决hash冲突的问题。

             5.2，put操作过程：向hashMap的写入一个Key-Value对

                        1、通过Hash函数，将Key转换成长度固定的hashCode；
                        2、hashCode对数组容量取余（初始容量16）得到一个位置索引(index)；
                        3、通过位置索引(index)，可以得到数组在该位置保存的链表的头结点；
                        4、如果头结点中没有数据(没有碰撞到)：则将Value直接写入头结点，
                        5、如果头结点中有数据(即碰撞到了)：
                                    则新建一个头结点，将Value写入新建的头结点，新建的头结点指向原来的头结点。
                             //     如果碰撞导致链表过长(大于等于TREEIFY_THRESHOLD)，就把链表转换成红黑树；(java8 对hashmap的改造)
                        6、如果节点已经存在就替换old value(保证key的唯一性)
                        7、如果bucket满了(超过load factor*current capacity)，就要resize。
                        8、这样就完成了Key-Value的插入。

            5.3，get操作过程：根据 Key读取Value的过程：

                        1、通过Hash函数，将Key转换成长度固定的hashCode；
                        2、hashCode对数组容量取余（初始容量16）得到一个位置索引；
                        3、通过位置索引，可以得到数组在该位置保存的链表的头结点；
                        4、得到链表的头结点，就相当于获得了整个链表。但是这时候我们会发现，这些链表的长度有可能是不一样的。有的链表长度为1，有的链表长度大于1（hashCode相同）。
                                4.1，如果链表长度为1：可以很轻松的拿到对应的Value值，
                                4.2，如果链表长度大于1(有多个相同hashcode的value)：由hashCode定位到 数据所在的链表，链表中存在多个Value时，再通过 Key的equals()方法，与链表中的各个key比较，key相同的那个节点保存的Value就是要读取的那个Value。




    6. 总结
    我们现在可以回答开始的几个问题，加深对HashMap的理解：

            1. 什么时候会使用HashMap？他有什么特点？
            是基于Map接口的实现，存储键值对时，它可以接收null的键值，是非同步的，HashMap存储着Entry(hash, key, value, next)对象。

            2. 你知道HashMap的工作原理吗？
            通过hash的方法，通过put和get存储和获取对象。存储对象时，我们将K/V传给put方法时，它调用hashCode计算hash从而得到bucket位置，进一步存储，HashMap会根据当前bucket的占用情况自动调整容量(超过Load Facotr则resize为原来的2倍)。获取对象时，我们将K传给get，它调用hashCode计算hash从而得到bucket位置，并进一步调用equals()方法确定键值对。如果发生碰撞的时候，Hashmap通过链表将产生碰撞冲突的元素组织起来，在Java 8中，如果一个bucket中碰撞冲突的元素超过某个限制(默认是8)，则使用红黑树来替换链表，从而提高速度。

            3. 你知道get和put的原理吗？equals()和hashCode()的都有什么作用？
            通过对key的hashCode()进行hashing，并计算下标( n-1 & hash)，从而获得buckets的位置。如果产生碰撞，则利用key.equals()方法去链表或树中去查找对应的节点

            4. 你知道hash的实现吗？为什么要这样实现？
            在Java 1.8的实现中，是通过hashCode()的高16位异或低16位实现的：(h = k.hashCode()) ^ (h >>> 16)，主要是从速度、功效、质量来考虑的，这么做可以在bucket的n比较小的时候，也能保证考虑到高低bit都参与到hash的计算中，同时不会有太大的开销。

            5. 如果HashMap的大小超过了负载因子(load factor)定义的容量，怎么办？
            如果超过了负载因子(默认0.75)，则会重新resize一个原来长度两倍的HashMap，并且重新调用hash方法。

