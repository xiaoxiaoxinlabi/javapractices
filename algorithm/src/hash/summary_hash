Hash:
        一般直接音译成“哈希”，按真正含义译作“散列”比较合适。通过散列算法，把任意长度的输入，转换成固定长度的输出，输出就叫做散列值（hashCode）。
        这种转换是一种压缩映射，也就是说，散列值所占用的空间通常远小于输入值所占用的空间，不同的输入可能会有相同的散列值。散列的目的，在于尽量分散数据的存储位置，使数据散列在不同的哈希桶(bucket)中。

Hash散列，hash table(hash 表)

         1，hash(哈希/散列)：
                     哈希是一种用以常数平均时间执行插入、删除和查找的技术。但是，一般不支持诸如FindMin、FindMax以及以线性时间按排序顺序将整个表进行打印的操作。进一步讲，hash就是把任意长度的输入（预映射， pre-image），通过散列算法，变换成固定长度的输出，该输出就是散列值。hash就是找到一种数据内容和数据存放地址之间的映射关系

         2， hash table(hash表/散列表)：
                    2.1,若关键字为k，则其值存放在f(k)的存储位置上。由此，不需比较便可直接取得所查记录。称这个对应关系f为散列函数，按这个思想建立的表为散列表。

                          对不同的关键字可能得到同一散列地址，即k1 != k2，而f(k1)=f(k2)，这种现象称为冲突（英语：Collision）。具有相同函数值的关键字对该散列函数来说称做同义词。综上所述，根据散列函数{\displaystyle f(k)}f(k)和处理冲突的方法将一组关键字映射到一个有限的连续的地址集（区间）上，并以关键字在地址集中的“像”作为记录在表中的存储位置，这种表便称为散列表，这一映射过程称为散列造表或散列，所得的存储位置称散列地址。
                          若对于关键字集合中的任一个关键字，经散列函数映象到地址集合中任何一个地址的概率是相等的，则称此类散列函数为均匀散列函数（Uniform Hash function），这就使关键字经过散列函数得到一个“随机的地址”，从而减少冲突。

         3，hash 函数：
                   3.1，散列函数能使对一个数据序列的访问过程更加迅速有效，通过散列函数，数据元素将被更快定位。
                   3.2，建立起数据元素的存放位置与数据元素的关键字之间的对应关系的函数。即使用哈希函数可将被查找的键转换为数组的索引。理想情况下它应该运算简单并且保证任何两个不同的关键字映射到不同的单元（索引值）。但是，这是不可能的，很多时候我们都需要处理多个键被哈希到同一个索引值的情况，即哈希碰撞冲突。

                   3.3， 常用的哈希构造函数有以下几种：
                                3.3.1，直接寻址法
                                            取关键字或关键字的某个线性函数值为散列地址。即hash(k)=k或hash(k)=a· k+b，其中a ,b为常数（这种散列函数叫做自身函数）

                                3.3.2，数字分析法：
                                            假设关键字是以r为基的数，并且哈希表中可能出现的关键字都是事先知道的，则可取关键字的若干数位组成哈希地址。

                                3.3.3，除留余数法：
                                            取关键字被某个不大于散列表表长m的数p除后所得的余数为散列地址。即hash(k)=k  mod p,  p<=m。不仅可以对关键字直接取模，也可在折叠法、平方取中法等运算之后取模。对p的选择很重要，一般取素数或m，若p选择不好，容易产生冲突。

                                3.3.4，平方取中法：
                                            取关键字平方后的中间几位为哈希地址。通常在选定哈希函数时不一定能知道关键字的全部情况，取其中的哪几位也不一定合适，而一个数平方后的中间几位数和数的每一位都相关，由此使随机分布的关键字得到的哈希地址也是随机的。取的位数由表长决定。

                                3.3.5，折叠法：
                                            将关键字分割成位数相同的几部分（最后一部分的位数可以不同），然后取这几部分的叠加和（舍去进位）作为哈希地址。

                                3.3.6，随机数法：
                                            设定哈希函数为:H(key) = Rand(key)，其中，Rand 为伪随机函数
                                            此法适合于对长度不等的关键字构造哈希函数。

                                  ======================================以下几点维基百科没有===================================================
                                3.3.7，旋转法：
                                            旋转法是将数据的键值中进行旋转。旋转法通常并不直接使用在哈希函数上，而是搭配其他哈希函数使用。

                                3.3.7，相乘取整发：
                                            首先用关键字key乘上某个常数A(0< A<1)，并抽取出key.A的小数部分；然后用m乘以该小数后取整


HashMap、HashTable:
        都是基于hash表实现的，都通过单链表解决数据通途的问题。二者很类似，但是也有很明显的区别。